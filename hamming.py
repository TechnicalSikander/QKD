# -*- coding: utf-8 -*-
"""hamming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OgMBSF15Rqfg-h8OcjP_8-MOigL1nizy

**Python illustration of encoding and decoding with error correction:**
"""

def hamming74_encode(data_bits):
    # data_bits: 4 bits as list
    D3, D2, D1, D0 = data_bits
    p1 = (D3 + D2 + D0) % 2
    p2 = (D3 + D1 + D0) % 2
    p4 = (D2 + D1 + D0) % 2
    return [p1, p2, D3, p4, D2, D1, D0]

def hamming74_syndrome(codeword):
    p1, p2, D3, p4, D2, D1, D0 = codeword
    s1 = (p1 + D3 + D2 + D0) % 2
    s2 = (p2 + D3 + D1 + D0) % 2
    s4 = (p4 + D2 + D1 + D0) % 2
    return s4 * 4 + s2 * 2 + s1

def hamming74_decode(received):
    syndrome = hamming74_syndrome(received)
    corrected = received.copy()
    if syndrome != 0:
        print(f"Error detected at position {syndrome}")
        corrected[syndrome - 1] ^= 1  # flip the bit
    else:
        print("No error detected")
    # extract data bits
    return [corrected[2], corrected[4], corrected[5], corrected[6]]

# Example use
data_bits = [1, 0, 1, 1]
codeword = hamming74_encode(data_bits)
print("Codeword:", codeword)

# Simulate error
received = codeword.copy()
received[4] ^= 1  # flip bit 5
print("Received:", received)

# Decode
decoded = hamming74_decode(received)
print("Decoded data bits:", decoded)